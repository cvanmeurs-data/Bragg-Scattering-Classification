/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var selectedLakes = ee.FeatureCollection("projects/ee-cvanmeursdata/assets/Thesis/Selected_Lakes");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*

  Differently than with Bosomtwe/Kpong, only Bragg patches were selected and collected here, no water patches. 
  For the as to why, please refer to the Thesis document provided within the Github repository. 
  
*/

// Import geometry and select lake. 
var lakeVoggo = ee.Feature(selectedLakes.filter(ee.Filter.eq('Hylak_id', 179833)).first());

// Set center and add lake outline. 
Map.centerObject(lakeVoggo, 13);
Map.addLayer(lakeVoggo, {}, 'Lake Outline');

// Function to set class to bragg/water
var setClassBragg = function(feature) {
  return feature.set('class', 2);
};


// ------------------------------------------------------------------------------------------------ //
// ----------------------------- (1). SELECTION BRAGG PATCHES ------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2020 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //


// May 10th
var braggVoggo20200510 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.0201952285427796, 9.571162093032246],
          [-1.0282633132595764, 9.565576076908538],
          [-1.0280058211941467, 9.562275206056297],
          [-1.0268900222439514, 9.560159246351741],
          [-1.0212251968044983, 9.561598100382948],
          [-1.016762001003717, 9.56388332662784],
          [-1.0177061385769592, 9.566083900349394],
          [-1.0194227523464905, 9.567184181869028],
          [-1.0203668899197327, 9.568961552185288]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2021 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// August 21st
var braggVoggo20210821 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.0244970782129448, 9.563335071658289],
          [-1.0227375490991752, 9.562488691993517],
          [-1.0218363268701713, 9.561769267622394],
          [-1.0206346972314995, 9.562107820457184],
          [-1.0194759829370659, 9.561134480148898],
          [-1.0181885226099174, 9.560542010771504],
          [-1.017501877102105, 9.562277096748211],
          [-1.0172443850366752, 9.563419709508914],
          [-1.0169439776270073, 9.56430840566867],
          [-1.017501877102105, 9.56604347242928],
          [-1.0186605913965385, 9.566508976639083],
          [-1.0200767977564018, 9.56595883523175],
          [-1.0215788348047417, 9.56595883523175],
          [-1.0226517184106987, 9.566508976639083],
          [-1.0230808718530815, 9.567863167079576],
          [-1.0245829089014213, 9.568159395519315],
          [-1.0260849459497612, 9.567228390982288],
          [-1.0272436602441948, 9.566170428186078],
          [-1.0274582369653862, 9.564731593499832],
          [-1.0268574221460502, 9.563504347338483],
          [-1.02561287716314, 9.563123476939566]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);


var braggVoggo = ee.List([
  braggVoggo20200510,
  braggVoggo20210821
]);

// ---------------------------------- (c). sample lists ------------------------------------------- //

// Sample the lists with random points, so that they can be used in classification. 
var randomPointsBragg = braggVoggo.map(function(listElement) {
  return ee.FeatureCollection.randomPoints({
    region: ee.Feature(listElement).geometry(),
    points: 50, 
    seed: 0, 
    maxError: 1,
  }).map(setClassBragg);
});

// ------------------------------------------------------------------------------------------------ //
// --------------------------- (2). COMPUTE SENTINEL-1 IMAGERY ------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Define a neighborhood with a kernel.
var kernel = ee.Kernel.circle({radius: 4});

// Function to compute Entropy. 
var computeEntropy = function (image) {
  var ent =  ee.Image(image.toInt32()).entropy(kernel).rename('VV_E', 'VH_E');
  return image.addBands(ent);
};

// Function to compute GLCM Features. 
var computeGlcm = function (image) {
  var glcm = ee.Image(image.toInt32()).glcmTexture(4); 
  return image.addBands(glcm);
};

// Compile list of the selected Bands: VV, VH, Ent, GLCM.
var selectedBands = ee.List([
  "VV",
  "VH",
  "VV_E",
  "VH_E",
  "VV_asm",
  "VV_contrast",
  "VV_corr",
  "VV_var",
  "VV_idm",
  "VV_savg",
  "VV_svar",
  "VV_sent",
  "VV_ent",
  "VV_dvar",
  "VV_dent",
  "VV_diss",
  "VV_inertia",
  "VV_shade",
  "VV_prom",
  "VH_asm",
  "VH_contrast",
  "VH_corr",
  "VH_var",
  "VH_idm",
  "VH_savg",
  "VH_svar",
  "VH_sent",
  "VH_ent",
  "VH_dvar",
  "VH_dent",
  "VH_diss",
  "VH_inertia",
  "VH_shade",
  "VH_prom",
]);

// Total Sentinel-1 Imagery for 2018-2019
var Sentinel = ee.ImageCollection('COPERNICUS/S1_GRD')
          .filterBounds(lakeVoggo.geometry())
          .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
          .filter(ee.Filter.date('2020-01-01', '2022-01-01'))
          .select('VV', 'VH')
          .map(computeEntropy)
          .map(computeGlcm)
          .select(selectedBands);

// ImageCollection to List
var S1 = Sentinel.toList(Sentinel.size());


// Bragg Dates for Sentinel-1 Imagery 2018-2019
var bD = ee.List(['2020-05-10', '2021-08-21']);
var bDn = bD.map(function(date) {
  var nextDate = ee.Date(date).advance(1, 'day');
  var dateCombo = [ee.Date(date), nextDate];
  return dateCombo;
});

// Bragg Sentinel-1 Imagery for 2018-2022, compiled from the Bragg Dates. 
var SB1 = bDn.map(function(date) {
  return ee.Image(Sentinel.filter(ee.Filter.date(ee.List(date).get(0), ee.List(date).get(1))).first());
});



// ------------------------------------------------------------------------------------------------ //
// ------------------------------- (3). COMPUTE SNIC IMAGERY -------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// function to compute SNIC superpixels. 
var afn_SNIC = function(imageOriginal) {
  
  // Adjustable Superpixel Seed and SNIC segmentation Parameters:
  var superPixelSize = 20;
  var compactness = 1;
  var connectivity = 4;
  var seedShape = 'square';
  var neighborhoodSize = 2 * superPixelSize;
  
  // Creates seed grid. 
    var theSeeds = ee.Algorithms.Image.Segmentation.seedGrid(
        superPixelSize, seedShape);
  
  // Preforms actual SNIC Segmentation. 
    var snic = ee.Algorithms.Image.Segmentation.SNIC({
        image: imageOriginal,
        size: superPixelSize,
        compactness: compactness,
        connectivity: connectivity,
        neighborhoodSize: neighborhoodSize,
        seeds: theSeeds
    });
  
  // Copies 'system:time_start' parameter to the computed SNIC imagery. 
    var theStack = snic.addBands(theSeeds).copyProperties({
      source: imageOriginal, 
      properties: ['system:time_start']
    });
    return (theStack);
};


// Create SNIC images for all Bragg dates
var SNICsBragg = SB1.map(afn_SNIC);

// Compute list of band names. 
var propertyList = ee.Image(SNICsWater.get(0)).bandNames();//.slice(1, 41);

// ------------------------------------------------------------------------------------------------ //
// ---------------------------------- (4). OVERLAY PIXELS ----------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// Zip together SNIC Imagery with the random Bragg samples.
var BraggPredictor = ee.List(randomPointsBragg).zip(SNICsBragg);

// Overlay and SNIC values for Bragg by applying reduceRegions. 
var fcSamplesBragg = BraggPredictor.map(function(imagePair) {
  return ee.Image(ee.List(imagePair).get(1)).select(propertyList).reduceRegions({
    collection: ee.FeatureCollection(ee.List(imagePair).get(0)),
    reducer: ee.Reducer.first(), 
    scale: 10, // Smaller scale can be used since less data is processed, so no computation time-out will occur.
  });
});


// Merge all braggTraining instances together to create one Bragg data training set. 
var mergerBragg = ee.FeatureCollection([]);
for (var i=0; i <=1; i++){
  var mergedBragg = mergerBragg.merge(ee.FeatureCollection(ee.List(fcSamplesBragg).get(i)));
  var mergerBragg = mergedBragg;
}

var merger = mergerBragg;

// ------------------------------------------------------------------------------------------------ //
// ------------------------------------ (5). EXPORT DATA ------------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Export the FeatureCollection to a CSV file to Google Drive.
Export.table.toDrive({
  collection: merger,
  description:'VV_VH_Ent_GLCM_Voggo_Scl_10',
  folder: 'Task 50',
  fileFormat: 'CSV'
});




