/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var selectedLakes = ee.FeatureCollection("projects/ee-cvanmeursdata/assets/Thesis/Selected_Lakes");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*

  Differently than with Bosomtwe/Kpong, only Bragg patches were selected and collected here, no water patches. 
  For the as to why, please refer to the Thesis document provided within the Github repository. 
  
*/

// Import geometry and select lake. 
var lakeTono = ee.Feature(selectedLakes.filter(ee.Filter.eq('Hylak_id', 15822)).first());

// Set center and add lake outline. 
Map.centerObject(lakeTono, 13);
Map.addLayer(lakeTono, {}, 'Lake Outline');

// Function to set class to bragg/water
var setClassBragg = function(feature) {
  return feature.set('class', 2);
};


// ------------------------------------------------------------------------------------------------ //
// ----------------------------- (1). SELECTION BRAGG PATCHES ------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2020 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// May 4th
var braggTono20200504 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.1765352735825285, 10.88167451041945],
          [-1.17524781325538, 10.877965842666887],
          [-1.1724154005356535, 10.874678575864396],
          [-1.1684671888657316, 10.872487044532622],
          [-1.1655489454575285, 10.870211206492977],
          [-1.164690638572763, 10.868272515952059],
          [-1.1595407972641691, 10.868946844525347],
          [-1.1576525221176848, 10.872318464532471],
          [-1.1603991041489348, 10.877965842666887],
          [-1.160570765525888, 10.881337360712271],
          [-1.1592833051987395, 10.884793127129422],
          [-1.15876832106788, 10.888585995353163],
          [-1.1595407972641691, 10.892547383932126],
          [-1.1632315168686613, 10.896171586890652],
          [-1.1658064375229582, 10.895413036434183],
          [-1.1669222364731535, 10.892631668222954],
          [-1.1675230512924895, 10.89044026890766],
          [-1.168982172996591, 10.887911711198406],
          [-1.17250123122413, 10.885214559316651],
          [-1.174475337059091, 10.8834445401248]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);


// May 10th
var braggTono20200510 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.1564476072104157, 10.888246381990351],
          [-1.1594516813070954, 10.888162096458382],
          [-1.1613399564535798, 10.887150668214513],
          [-1.1627132474692048, 10.885464946843545],
          [-1.1632282316000642, 10.88335778171757],
          [-1.1621982633383454, 10.881587751496944],
          [-1.1615974485190095, 10.879227694851362],
          [-1.162455755403775, 10.877204774284229],
          [-1.1608249723227204, 10.87307460218081],
          [-1.1577350675375642, 10.870714478158304],
          [-1.1557609617026032, 10.870208734867218],
          [-1.1543876706869782, 10.86936582747708],
          [-1.151297765901822, 10.871641671965353],
          [-1.1495811521322907, 10.876109019913129],
          [-1.1500103055746735, 10.879901998656766],
          [-1.1494953214438142, 10.881587751496944],
          [-1.1488086759360017, 10.882683485730261],
          [-1.1508686124594392, 10.884874942110356],
          [-1.1533577024252595, 10.88672923876601]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);


var braggTono = ee.List([
  braggTono20200504,
  braggTono20200510,
]);

// ---------------------------------- (c). sample lists ------------------------------------------- //

// Sample the lists with random points, so that they can be used in classification. 
var randomPointsBragg = braggTono.map(function(listElement) {
  return ee.FeatureCollection.randomPoints({
    region: ee.Feature(listElement).geometry(),
    points: 50, 
    seed: 0, 
    maxError: 1,
  }).map(setClassBragg);
});

// ------------------------------------------------------------------------------------------------ //
// --------------------------- (2). COMPUTE SENTINEL-1 IMAGERY ------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Define a neighborhood with a kernel.
var kernel = ee.Kernel.circle({radius: 4});

// Function to compute Entropy. 
var computeEntropy = function (image) {
  var ent =  ee.Image(image.toInt32()).entropy(kernel).rename('VV_E', 'VH_E');
  return image.addBands(ent);
};

// Function to compute GLCM Features. 
var computeGlcm = function (image) {
  var glcm = ee.Image(image.toInt32()).glcmTexture(4); 
  return image.addBands(glcm);
};

// Compile list of the selected Bands: VV, VH, Ent, GLCM.
var selectedBands = ee.List([
  "VV",
  "VH",
  "VV_E",
  "VH_E",
  "VV_asm",
  "VV_contrast",
  "VV_corr",
  "VV_var",
  "VV_idm",
  "VV_savg",
  "VV_svar",
  "VV_sent",
  "VV_ent",
  "VV_dvar",
  "VV_dent",
  "VV_diss",
  "VV_inertia",
  "VV_shade",
  "VV_prom",
  "VH_asm",
  "VH_contrast",
  "VH_corr",
  "VH_var",
  "VH_idm",
  "VH_savg",
  "VH_svar",
  "VH_sent",
  "VH_ent",
  "VH_dvar",
  "VH_dent",
  "VH_diss",
  "VH_inertia",
  "VH_shade",
  "VH_prom",
]);

// Total Sentinel-1 Imagery for 2018-2022
var Sentinel = ee.ImageCollection('COPERNICUS/S1_GRD')
          .filterBounds(lakeTono.geometry())
          .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
          .filter(ee.Filter.date('2018-01-01', '2021-01-01'))
          .select('VV', 'VH')
          .map(computeEntropy)
          .map(computeGlcm)
          .select(selectedBands);

// ImageCollection to List
var S1 = Sentinel.toList(Sentinel.size());

// Bragg Dates for Sentinel-1 Imagery 2018-2022
var bD = ee.List(['2020-05-04', '2020-05-10']);
var bDn = bD.map(function(date) {
  var nextDate = ee.Date(date).advance(1, 'day');
  var dateCombo = [ee.Date(date), nextDate];
  return dateCombo;
});

// Bragg Sentinel-1 Imagery for 2018-2022, compiled from the Bragg Dates. 
var SB1 = bDn.map(function(date) {
  return ee.Image(Sentinel.filter(ee.Filter.date(ee.List(date).get(0), ee.List(date).get(1))).first());
});


// ------------------------------------------------------------------------------------------------ //
// ------------------------------- (3). COMPUTE SNIC IMAGERY -------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// function to compute SNIC superpixels. 
var afn_SNIC = function(imageOriginal) {
  
  // Adjustable Superpixel Seed and SNIC segmentation Parameters:
  var superPixelSize = 30;
  var compactness = 1;
  var connectivity = 4;
  var seedShape = 'square';
  var neighborhoodSize = 2 * superPixelSize;
  
  // Creates seed grid. 
    var theSeeds = ee.Algorithms.Image.Segmentation.seedGrid(
        superPixelSize, seedShape);
  
  // Preforms actual SNIC Segmentation. 
    var snic = ee.Algorithms.Image.Segmentation.SNIC({
        image: imageOriginal,
        size: superPixelSize,
        compactness: compactness,
        connectivity: connectivity,
        neighborhoodSize: neighborhoodSize,
        seeds: theSeeds
    });
  
  // Copies 'system:time_start' parameter to the computed SNIC imagery. 
    var theStack = snic.addBands(theSeeds).copyProperties({
      source: imageOriginal, 
      properties: ['system:time_start']
    });
    return (theStack);
};


// Create SNIC images for all Bragg dates
var SNICsBragg = SB1.map(afn_SNIC);

// Compute list of band names. 
var propertyList = ee.Image(SNICsWater.get(0)).bandNames();//.slice(1, 41);

// ------------------------------------------------------------------------------------------------ //
// ---------------------------------- (4). OVERLAY PIXELS ----------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// Zip together SNIC Imagery with the random Bragg samples.
var BraggPredictor = ee.List(randomPointsBragg).zip(SNICsBragg);

// Overlay and SNIC values for Bragg by applying reduceRegions. 
var fcSamplesBragg = BraggPredictor.map(function(imagePair) {
  return ee.Image(ee.List(imagePair).get(1)).select(propertyList).reduceRegions({
    collection: ee.FeatureCollection(ee.List(imagePair).get(0)),
    reducer: ee.Reducer.first(), 
    scale: 10, // Smaller scale can be used since less data is processed, so no computation time-out will occur.
  });
});


// Merge all braggTraining instances together to create one Bragg data training set. 
var mergerBragg = ee.FeatureCollection([]);
for (var i=0; i <=1; i++){ // This value is dependent on the amount of Bragg dates
  var mergedBragg = mergerBragg.merge(ee.FeatureCollection(ee.List(fcSamplesBragg).get(i)));
  var mergerBragg = mergedBragg;
}

var merger = mergerBragg;

// ------------------------------------------------------------------------------------------------ //
// ------------------------------------ (5). EXPORT DATA ------------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Export the FeatureCollection to a CSV file to Google Drive.
Export.table.toDrive({
  collection: merger,
  description:'VV_VH_Ent_GLCM_Tono_Scl_10',
  folder: 'Task 50',
  fileFormat: 'CSV'
});




