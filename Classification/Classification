/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var TDBarekese = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Barekese_Scl_10"),
    TDBosomtwe2018 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Bosomtwe_2018_Scl_20"),
    TDBosomtwe2019 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Bosomtwe_2019_Scl_20"),
    TDBosomtwe2020 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Bosomtwe_2020_Scl_20"),
    TDBosomtwe2021 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Bosomtwe_2021_Scl_20"),
    TDBosomtwe2022 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Bosomtwe_2022_Scl_20"),
    TDBui = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Bui_Scl_10"),
    TDKpong2018 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Kpong_2018_Scl_10"),
    TDKpong2019 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Kpong_2019_Scl_10"),
    TDKpong2020 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Kpong_2020_Scl_20"),
    TDKpong2021 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Kpong_2021_Scl_10"),
    TDKpong2022 = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Kpong_2022_Scl_10"),
    TDTono = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Tono_Scl_10"),
    TDVea = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Vea_Scl_10"),
    TDVoggo = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/TrainingData/VV_VH_Ent_GLCM_Voggo_Scl_10"),
    RandomForest = ee.FeatureCollection("projects/ee-cvanmeursdata-thesis/assets/RandomForest_1");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*

  All Traiing Data is imported and collected here. Null values are filtered out and the ee.Classifier()
  is trained to fit a Random Forest.  

*/

// ------------------------------------------------------------------------------------------------ //
// ------------------------------------ 0. IMPORT ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

var requiredFunctions = require('users/cvanmeursdata/BraggScattering:Function/Functions');

// ------------------------------------------------------------------------------------------------ //
// ------------------------------------- 1. DATA -------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// All bands that will be used in classification.
var totalBands = ee.List([
"VH_E_mean",
"VH_asm_mean",
"VH_contrast_mean",	
"VH_corr_mean",	
"VH_dent_mean",	
"VH_diss_mean",	
"VH_dvar_mean",	
"VH_ent_mean",
"VH_idm_mean",	
"VH_inertia_mean",	
"VH_mean",
"VH_prom_mean",	
"VH_savg_mean",	
"VH_sent_mean",	
"VH_shade_mean",	
"VH_svar_mean",	
"VH_var_mean",
"VV_E_mean",	
"VV_asm_mean",	
"VV_contrast_mean",	
"VV_corr_mean",	
"VV_dent_mean",	
"VV_diss_mean",
"VV_dvar_mean",	
"VV_ent_mean",	
"VV_idm_mean",
"VV_inertia_mean",
"VV_mean",
"VV_prom_mean",	
"VV_savg_mean",	
"VV_sent_mean",	
"VV_shade_mean",	
"VV_svar_mean",	
"VV_var_mean",	
"class",
]);

// Collect the total amount of Training Data and filter out the 'cluster' band given its irrelevance. 
var trainingData = TDBarekese
            .merge(TDBosomtwe2018)
            .merge(TDBosomtwe2019)
            .merge(TDBosomtwe2020)
            .merge(TDBosomtwe2021)
            .merge(TDBosomtwe2022)
            .merge(TDBui)
            .merge(TDKpong2018)
            .merge(TDKpong2019)
            .merge(TDKpong2020)
            .merge(TDKpong2021)
            .merge(TDKpong2022)
            .merge(TDTono)
            .merge(TDVea)
            .merge(TDVoggo)
            .select(totalBands);


// Filter out all Null values in the training data. 

// 1. V_Mean
var trainingData = trainingData.filter(ee.Filter.neq('VH_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_mean', null));

// 2. V_E_Mean
var trainingData = trainingData.filter(ee.Filter.neq('VH_E_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_E_mean', null));

// 3. V_asm_Mean
var trainingData = trainingData.filter(ee.Filter.neq('VH_asm_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_asm_mean', null));

// 4.
var trainingData = trainingData.filter(ee.Filter.neq('VH_contrast_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_contrast_mean', null));

// 5. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_corr_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_corr_mean', null));

// 6. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_dent_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_dent_mean', null));

// 7.
var trainingData = trainingData.filter(ee.Filter.neq('VH_diss_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_diss_mean', null));

// 8. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_dvar_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_dvar_mean', null));

// 9. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_ent_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_ent_mean', null));

// 10. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_idm_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_idm_mean', null));

// 11. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_inertia_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_inertia_mean', null));

// 12.
var trainingData = trainingData.filter(ee.Filter.neq('VH_prom_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_prom_mean', null));

// 13.
var trainingData = trainingData.filter(ee.Filter.neq('VH_savg_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_savg_mean', null));

// 14. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_sent_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_sent_mean', null));

// 15. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_shade_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_shade_mean', null));

// 16. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_svar_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_svar_mean', null));

// 17. 
var trainingData = trainingData.filter(ee.Filter.neq('VH_var_mean', null));
var trainingData = trainingData.filter(ee.Filter.neq('VV_var_mean', null));

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------- 2. TRAINING ------------------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// The randomColumn() method will add a column of uniform random
// numbers in a column named 'random' by default.
var trainingDataRandom = trainingData.randomColumn();

var split = 0.8;  // Roughly 70% training, 30% testing.
var training = trainingDataRandom.filter(ee.Filter.lt('random', split));
var validation = trainingDataRandom.filter(ee.Filter.gte('random', split));

print('Training size',training.size());
print('Test size',validation.size());

// ------------------------------------------------------------------------------------------------ //
// ---------------------------------- 3. CLASSIFIER ----------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// The Bands used in training. 
var trainingBands = ee.List([
"VH_E_mean",
"VH_asm_mean",
"VH_contrast_mean",	
"VH_corr_mean",	
"VH_dent_mean",	
"VH_diss_mean",	
"VH_dvar_mean",	
"VH_ent_mean",
"VH_idm_mean",	
"VH_inertia_mean",	
"VH_mean",
"VH_prom_mean",	
"VH_savg_mean",	
"VH_sent_mean",	
"VH_shade_mean",	
"VH_svar_mean",	
"VH_var_mean",
"VV_E_mean",	
"VV_asm_mean",	
"VV_contrast_mean",	
"VV_corr_mean",	
"VV_dent_mean",	
"VV_diss_mean",
"VV_dvar_mean",	
"VV_ent_mean",	
"VV_idm_mean",
"VV_inertia_mean",
"VV_mean",
"VV_prom_mean",	
"VV_savg_mean",	
"VV_sent_mean",	
"VV_shade_mean",	
"VV_svar_mean",	
"VV_var_mean",	
]);

// Define the classifier. 
var Classifier = ee.Classifier.smileRandomForest({
  numberOfTrees: 20, 
});

// Train the classifier. 
var RF = Classifier.train({
  features: training, 
  classProperty: 'class',
  inputProperties: trainingBands,
});

// ------------------------------------------------------------------------------------------------ //
// ------------------------------------- 4. ACCURACY ---------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// Classify the validation data.
var validated = validation.classify(RF);

// Get a confusion matrix representing expected accuracy.
var testAccuracy = validated.errorMatrix('class', 'classification');
print('Validation error matrix: ', testAccuracy);
print('Validation overall accuracy: ', testAccuracy.accuracy());

// ------------------------------------------------------------------------------------------------ //
// --------------------------------------- 5. ENCODE ---------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// List the trees in the Random Forest. 
var decisionTrees = ee.List(RF.explain().get('trees'));


// // Export to asset. Uncheck to export Random Forest
// Export.table.toAsset({
//   collection: requiredFunctions.encodeFeatureCollection(decisionTrees),
//   description: 'RandomForest_1'
// });

// ------------------------------------------------------------------------------------------------ //
// --------------------------------------- 6. DECODE ---------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// Decode classifier. 
var decisionTrees = requiredFunctions.decodeFeatureCollection(RandomForest);
var RF_Imported = ee.Classifier.decisionTreeEnsemble(decisionTrees);
























