/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var selectedLakes = ee.FeatureCollection("projects/ee-cvanmeursdata/assets/Thesis/Selected_Lakes");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*

  Differently than with Bosomtwe/Kpong, only Bragg patches were selected and collected here, no water patches. 
  For the as to why, please refer to the Thesis document provided within the Github repository. 
  
*/

// Import geometry and select lake. 
var lakeBarekese = ee.Feature(selectedLakes.filter(ee.Filter.eq('Hylak_id', 180303)).first());

// Set center and add lake outline. 
Map.centerObject(lakeBarekese, 14);
Map.addLayer(lakeBarekese, {}, 'Lake Outline');

// Function to set class to bragg/water
var setClassBragg = function(feature) {
  return feature.set('class', 2);
};


// // ------------------------------------------------------------------------------------------------ //
// // ----------------------------- (1). SELECTION BRAGG PATCHES ------------------------------------- //
// // ------------------------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2019 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// September 7th
var braggBarekese20190907 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.71936658865806, 6.840299026683065],
          [-1.717821636265482, 6.837657207308634],
          [-1.7161908531844272, 6.835697138333877],
          [-1.714645900791849, 6.835100594006863],
          [-1.7142167473494663, 6.837231106041486],
          [-1.713100948399271, 6.8382537484443064],
          [-1.7110410118758335, 6.8388502888351415],
          [-1.7096677208602085, 6.8388502888351415],
          [-1.7090669060408725, 6.840895564519789],
          [-1.7072644615828647, 6.841406882072498],
          [-1.7060628319441928, 6.842429515535491],
          [-1.706835308140482, 6.843707804284301],
          [-1.7093243981063022, 6.8429408314456985],
          [-1.7106976891219272, 6.843963461623356],
          [-1.7115559960066928, 6.846008715406387],
          [-1.7126717949568881, 6.846434808841355],
          [-1.7128434563338413, 6.844474775890692],
          [-1.7126717949568881, 6.843281708414973],
          [-1.7140450859725131, 6.843111269960754],
          [-1.717220821446146, 6.841662540643548]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2020 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// March 5th
var braggBarekese20200305 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.7212977791487827, 6.834764977654894],
          [-1.721641101902689, 6.832932728423926],
          [-1.71936658865806, 6.831398746923918],
          [-1.717993297642435, 6.830802197234005],
          [-1.7173495674788608, 6.829864760503833],
          [-1.7163625145613803, 6.830802197234005],
          [-1.7159762764632358, 6.83195268525542],
          [-1.7152038002669467, 6.8328475073585775],
          [-1.7143454933821811, 6.833529275456091],
          [-1.7146029854476108, 6.834892808734537],
          [-1.714645900791849, 6.83591545614098],
          [-1.7147317314803256, 6.8372789826124665],
          [-1.7140880013167514, 6.837960744389211],
          [-1.7155042076766147, 6.838386845005709],
          [-1.7167058373152866, 6.83830162491282],
          [-1.7176070595442905, 6.836938101359315],
          [-1.7175641442000522, 6.836213727889043],
          [-1.7186370278060092, 6.836128507408585],
          [-1.719967403477396, 6.835574573915265]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// May 28th
var braggBarekese20200528 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[[-1.7212548638045444, 6.833056051059142],
           [-1.7201819801985874, 6.832289061122017],
           [-1.7186370278060092, 6.831905565692129],
           [-1.717220821446146, 6.831394237973908],
           [-1.715847530430521, 6.831394237973908],
           [-1.715246715611185, 6.832842998422231],
           [-1.7139163399397983, 6.833269103601118],
           [-1.7133584404647006, 6.83386565021359],
           [-1.7143884087264194, 6.835357013488116],
           [-1.7155900383650913, 6.836763151742197],
           [-1.7149033928572788, 6.837913625418165],
           [-1.7138305092513217, 6.839064096323997],
           [-1.7115559960066928, 6.838936266360156],
           [-1.710354366368021, 6.838978876351907],
           [-1.709753551548685, 6.840683272905139],
           [-1.7076506996810092, 6.842345053688467],
           [-1.7083373451888217, 6.844092047763336],
           [-1.707908191746439, 6.845370332060411],
           [-1.7073502922713413, 6.846819050125019],
           [-1.7073502922713413, 6.848182545462144],
           [-1.7076506996810092, 6.849162555328766],
           [-1.7094960594832553, 6.849162555328766],
           [-1.711427249973978, 6.8482251546286435],
           [-1.7126717949568881, 6.846094691642449],
           [-1.7130151177107944, 6.844262485867401],
           [-1.7122855568587436, 6.843793780934802],
           [-1.713401355808939, 6.842728540740292],
           [-1.714774646824564, 6.8423024439970375],
           [-1.71662000662681, 6.840768492573143],
           [-1.7179074669539585, 6.840385003947339],
           [-1.720139064854349, 6.839873685300645],
           [-1.721340694493021, 6.838126675794923],
           [-1.721641101902689, 6.836677931359726],
           [-1.7215981865584506, 6.83505874120544]]],
         [[[-1.7076506996810092, 6.850142563182009],
           [-1.7037024880110874, 6.851165177925427],
           [-1.7003550911605014, 6.852273008089512],
           [-1.6988101387679233, 6.853210400833274],
           [-1.698166408604349, 6.854829529412771],
           [-1.7019858742415561, 6.853636487834769],
           [-1.7053761864363803, 6.852443443270913],
           [-1.7079511070906772, 6.851548657888876]]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// October 13th
var braggBarekese20201013 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.7176499748885288, 6.841405497836731],
          [-1.7189803505599155, 6.840894180282534],
          [-1.720568218296732, 6.839828933619807],
          [-1.7214265251814975, 6.839317614377866],
          [-1.7214265251814975, 6.837442772475317],
          [-1.7214265251814975, 6.835227040743098],
          [-1.7212119484603061, 6.833309572300015],
          [-1.720139064854349, 6.831946034506416],
          [-1.7194095040022983, 6.83160514945053],
          [-1.7179503822981967, 6.832670414443379],
          [-1.7173495674788608, 6.8340339501712855],
          [-1.7174353981673374, 6.835099209752827],
          [-1.7166629219710483, 6.836164466960405],
          [-1.7155900383650913, 6.836547958973907],
          [-1.7156329537093296, 6.837613212952279],
          [-1.7170062447249546, 6.838550634488802],
          [-1.717821636265482, 6.840297642444106]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2021 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// January 29th
var braggBarekese20210129 = ee.Feature(
                        ee.Geometry.MultiPolygon(
           [[[[-1.7188086891829624, 6.833225735561282],
           [-1.717692890232767, 6.832075250602526],
           [-1.7161050224959506, 6.832203082401294],
           [-1.7150321388899936, 6.833097904035891],
           [-1.714946308201517, 6.835143204340627],
           [-1.7155042076766147, 6.836080630722355],
           [-1.7170920754134311, 6.836038020472165],
           [-1.7184653664290561, 6.834546659322313]]],
         [[[-1.7198815727889194, 6.8341205552820385],
           [-1.718293705052103, 6.835654528049489],
           [-1.716448345249857, 6.836975445098811],
           [-1.7146029854476108, 6.838424188631978],
           [-1.7131867790877475, 6.838892898834564],
           [-1.7113843346297397, 6.839361608577294],
           [-1.7109980965315952, 6.840810344874443],
           [-1.7087235832869663, 6.841066003764833],
           [-1.707607784336771, 6.841662540643548],
           [-1.7063632393538608, 6.8429408314456985],
           [-1.7070928002059116, 6.8443469473751986],
           [-1.7090669060408725, 6.844730432818985],
           [-1.7107406044661655, 6.844986089610349],
           [-1.712500133579935, 6.8445173853882615],
           [-1.712800540989603, 6.843111269960754],
           [-1.7143884087264194, 6.842727783216324],
           [-1.7155900383650913, 6.842855612165366],
           [-1.717392482823099, 6.841364272297343],
           [-1.7190232659041538, 6.841151223364558],
           [-1.7207827950179233, 6.840554685847187],
           [-1.7209544563948764, 6.838466798669402],
           [-1.7210832024275913, 6.8341205552820385]]],
         [[[-1.7100968743025913, 6.851760944670127],
           [-1.7107835198104038, 6.851292247103808],
           [-1.7109980965315952, 6.850099196674512],
           [-1.709581890171732, 6.849715715545568],
           [-1.708981075352396, 6.850610504366803]]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// February 16th
var braggBarekese20210216 = ee.Feature(
                            ee.Geometry.MultiPolygon(
        [[[-1.710053958958353, 6.852016597693947],
          [-1.7109980965315952, 6.851420073758486],
          [-1.7116418266951694, 6.850567895413388],
          [-1.7108693504988803, 6.849800933600865],
          [-1.7094960594832553, 6.849502670340711],
          [-1.7088094139754428, 6.849715715545568],
          [-1.7088094139754428, 6.850993984776293]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// March 24th
var braggBarekese20210324 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.7076031395757751, 6.84619172956414],
          [-1.7085472771490173, 6.846617822835693],
          [-1.7096201607549744, 6.845978682785697],
          [-1.7115084359014587, 6.84568041713608],
          [-1.712624234851654, 6.844998666379892],
          [-1.7127100655401306, 6.843848209770793],
          [-1.710650129016693, 6.843720381087519],
          [-1.708332700427826, 6.844189086092177],
          [-1.7069164940679626, 6.8447430095952715]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// April 5th
var braggBarekese20210405 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.7123087216830624, 6.8489246371658],
          [-1.7123087216830624, 6.847262879288966],
          [-1.7126520444369686, 6.846325474856475],
          [-1.7117508222079647, 6.845814162571705],
          [-1.7096908856845272, 6.845686334414928],
          [-1.7087896634555233, 6.846325474856475],
          [-1.7081030179477108, 6.847944626810416],
          [-1.7083175946689022, 6.849265509860969],
          [-1.7097338010287655, 6.849308118930741],
          [-1.710892515323199, 6.8490098553624295],
          [-1.7117508222079647, 6.8489672462660165]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// April 17th
var braggBarekese20210417 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-1.7074790383040561, 6.849033970555077],
          [-1.708981075352396, 6.847286994569907],
          [-1.709453144139017, 6.845795668546241],
          [-1.7115130806624546, 6.844943480154637],
          [-1.709453144139017, 6.843068660337694],
          [-1.708079853123392, 6.843409537215698],
          [-1.7072215462386264, 6.844986089610349],
          [-1.7070498848616733, 6.845880887301718],
          [-1.7066636467635288, 6.84745743153298],
          [-1.7066636467635288, 6.848053960424304],
          [-1.707006969517435, 6.849033970555077]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);


var braggBarekese = ee.List([
  braggBarekese20190907,
  
  braggBarekese20200305,
  braggBarekese20200528,
  braggBarekese20201013,
  
  braggBarekese20210216,
  braggBarekese20210324,
  braggBarekese20210405,
  braggBarekese20210417,
  braggBarekese20210129,
]);

// ---------------------------------- (c). sample lists ------------------------------------------- //

var randomPointsBragg = braggBarekese.map(function(listElement) {
  return ee.FeatureCollection.randomPoints({
    region: ee.Feature(listElement).geometry(),
    points: 50, 
    seed: 0, 
    maxError: 1,
  }).map(setClassBragg);
});

// ------------------------------------------------------------------------------------------------ //
// --------------------------- (2). COMPUTE SENTINEL-1 IMAGERY ------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Define a neighborhood with a kernel.
var kernel = ee.Kernel.circle({radius: 4});

// Function to compute Entropy. 
var computeEntropy = function (image) {
  var ent =  ee.Image(image.toInt32()).entropy(kernel).rename('VV_E', 'VH_E');
  return image.addBands(ent);
};

// Function to compute GLCM Features. 
var computeGlcm = function (image) {
  var glcm = ee.Image(image.toInt32()).glcmTexture(4); 
  return image.addBands(glcm);
};

// Compile list of the selected Bands: VV, VH, Ent, GLCM.
var selectedBands = ee.List([
  "VV",
  "VH",
  "VV_E",
  "VH_E",
  "VV_asm",
  "VV_contrast",
  "VV_corr",
  "VV_var",
  "VV_idm",
  "VV_savg",
  "VV_svar",
  "VV_sent",
  "VV_ent",
  "VV_dvar",
  "VV_dent",
  "VV_diss",
  "VV_inertia",
  "VV_shade",
  "VV_prom",
  "VH_asm",
  "VH_contrast",
  "VH_corr",
  "VH_var",
  "VH_idm",
  "VH_savg",
  "VH_svar",
  "VH_sent",
  "VH_ent",
  "VH_dvar",
  "VH_dent",
  "VH_diss",
  "VH_inertia",
  "VH_shade",
  "VH_prom",
]);

// Total Sentinel-1 Imagery for 2018-2019
var Sentinel = ee.ImageCollection('COPERNICUS/S1_GRD')
          .filterBounds(lakeBarekese.geometry())
          .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
          .filter(ee.Filter.date('2019-01-01', '2022-01-01'))
          .select('VV', 'VH')
          .map(computeEntropy)
          .map(computeGlcm)
          .select(selectedBands);

// ImageCollection to List
var S1 = Sentinel.toList(Sentinel.size());

// Bragg Dates for Sentinel-1 Imagery 2018-2022
var bD = ee.List(['2019-09-07', 
                  '2020-03-05', '2020-05-28', '2020-10-13',
                  '2021-02-16', '2021-03-24', '2021-04-05', '2021-04-17', '2021-01-29']);
var bDn = bD.map(function(date) {
  var nextDate = ee.Date(date).advance(1, 'day');
  var dateCombo = [ee.Date(date), nextDate];
  return dateCombo;
});

// Bragg Sentinel-1 Imagery for 2018-2022, compiled from the Bragg Dates. 
var SB1 = bDn.map(function(date) {
  return ee.Image(Sentinel.filter(ee.Filter.date(ee.List(date).get(0), ee.List(date).get(1))).first());
});


// ------------------------------------------------------------------------------------------------ //
// ------------------------------- (3). COMPUTE SNIC IMAGERY -------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// function to compute SNIC superpixels. 
var afn_SNIC = function(imageOriginal) {
  
  // Adjustable Superpixel Seed and SNIC segmentation Parameters:
  var superPixelSize = 20;
  var compactness = 1;
  var connectivity = 4;
  var seedShape = 'square';
  var neighborhoodSize = 2 * superPixelSize;
  
  // Creates seed grid. 
    var theSeeds = ee.Algorithms.Image.Segmentation.seedGrid(
        superPixelSize, seedShape);
  
  // Preforms actual SNIC Segmentation. 
    var snic = ee.Algorithms.Image.Segmentation.SNIC({
        image: imageOriginal,
        size: superPixelSize,
        compactness: compactness,
        connectivity: connectivity,
        neighborhoodSize: neighborhoodSize,
        seeds: theSeeds
    });
  
  // Copies 'system:time_start' parameter to the computed SNIC imagery. 
    var theStack = snic.addBands(theSeeds).copyProperties({
      source: imageOriginal, 
      properties: ['system:time_start']
    });
    return (theStack);
};


// Create SNIC images for all Bragg dates
var SNICsBragg = SB1.map(afn_SNIC);

// Compute list of band names. 
var propertyList = ee.Image(SNICsWater.get(0)).bandNames();//.slice(1, 41);

// ------------------------------------------------------------------------------------------------ //
// ---------------------------------- (4). OVERLAY PIXELS ----------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// Zip together SNIC Imagery with the random Bragg samples.
var BraggPredictor = ee.List(randomPointsBragg).zip(SNICsBragg);

// Overlay and SNIC values for Bragg by applying reduceRegions. 
var fcSamplesBragg = BraggPredictor.map(function(imagePair) {
  return ee.Image(ee.List(imagePair).get(1)).select(propertyList).reduceRegions({
    collection: ee.FeatureCollection(ee.List(imagePair).get(0)),
    reducer: ee.Reducer.first(), 
    scale: 10, // Smaller scale can be used since less data is processed, so no computation time-out will occur.
  });
});


// Merge all braggTraining instances together to create one Bragg data training set. 
var mergerBragg = ee.FeatureCollection([]);
for (var i=0; i <=8; i++){
  var mergedBragg = mergerBragg.merge(ee.FeatureCollection(ee.List(fcSamplesBragg).get(i)));
  var mergerBragg = mergedBragg;
}

var merger = mergerBragg;


// ------------------------------------------------------------------------------------------------ //
// ------------------------------------ (5). EXPORT DATA ------------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Export the FeatureCollection to a CSV file to Google Drive.
Export.table.toDrive({
  collection: merger,
  description:'VV_VH_Ent_GLCM_Barekese_Scl_10',
  folder: 'Task 50',
  fileFormat: 'CSV'
});




