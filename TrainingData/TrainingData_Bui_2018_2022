/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Bui = 
    /* color: #ffffff */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-2.258687023999695, 8.301182264613178],
          [-2.2430658386969604, 8.281307808867341],
          [-2.2385168122077026, 8.284450417865326],
          [-2.237057690503601, 8.286064180300903],
          [-2.237486843945984, 8.288272476064616],
          [-2.2228956269049682, 8.296680873343352],
          [-2.216286663892273, 8.300842538769986],
          [-2.2140550659918823, 8.301267196028045],
          [-2.2098196853975605, 8.305118456318086],
          [-2.2050989975313495, 8.307836225229044],
          [-2.203039061007912, 8.309619750846927],
          [-2.2014082779268573, 8.311403268356075],
          [-2.200120817599709, 8.311658055909644],
          [-2.1985758652071308, 8.312931991194477],
          [-2.1984042038301777, 8.31403606509361],
          [-2.196172605929787, 8.31497027904146],
          [-2.194198500094826, 8.315989418990991],
          [-2.1923102249483417, 8.316074347200534],
          [-2.1910227646211933, 8.315904490763078],
          [-2.1889628280977558, 8.317857835349676],
          [-2.1882761825899433, 8.318876967790857],
          [-2.1863020767549823, 8.318707112568067],
          [-2.184242140231545, 8.318792040188674],
          [-2.1825255264620136, 8.321000151863041],
          [-2.1814097275118183, 8.322698690835697],
          [-2.1793497909883808, 8.323802737217932],
          [-2.1778048385958027, 8.324652001547813],
          [-2.1723492791611942, 8.326069207228958],
          [-2.170041237471565, 8.326550888159234],
          [-2.171338081040337, 8.328900936658844],
          [-2.1692968872710683, 8.333091465787932],
          [-2.172290216647914, 8.329131834388052],
          [-2.1750260713361502, 8.328229505730356],
          [-2.176560288394307, 8.327666867855907],
          [-2.1794356216768573, 8.329662623595178],
          [-2.1832980026583027, 8.327369635024645],
          [-2.18561543124717, 8.327964114832852],
          [-2.18561543124717, 8.330342025036035],
          [-2.184757124362404, 8.332465146935181],
          [-2.187589534212726, 8.332592540830714],
          [-2.189906965670998, 8.334673181486975],
          [-2.1927393783907245, 8.328898295564365],
          [-2.19634426730674, 8.327284709264053],
          [-2.199691664157326, 8.327879189201237],
          [-2.202266584811623, 8.331021425297253],
          [-2.2049273361543964, 8.326095746681236],
          [-2.206214796481545, 8.325246485482777],
          [-2.2102488388399433, 8.325671116312272],
          [-2.2117937912325214, 8.326945006037441],
          [-2.2133387436250995, 8.323632884130948],
          [-2.21557034152549, 8.324142443170915],
          [-2.2184027542452167, 8.320320734211796],
          [-2.2211493362764667, 8.320320734211796],
          [-2.222865950045998, 8.321424787296694],
          [-2.225011717257912, 8.319471460490846],
          [-2.2255267013887714, 8.315819562516742],
          [-2.2267283310274433, 8.314460708073144],
          [-2.2296465744356464, 8.314375779514018],
          [-2.2319640030245136, 8.312252559557571],
          [-2.2335947861055683, 8.312762133395616],
          [-2.233680616794045, 8.314630565136177],
          [-2.235225569186623, 8.315055207471787],
          [-2.2370280136446308, 8.31412099372632],
          [-2.238572966037209, 8.311997772390237],
          [-2.24028957980674, 8.310978622065662],
          [-2.242435347018654, 8.309364961969358],
          [-2.243636976657326, 8.30494859513626],
          [-2.2456969131807636, 8.304778733880912],
          [-2.247413526950295, 8.30579790031029],
          [-2.2492159714083027, 8.304863664517779],
          [-2.2519625534395527, 8.304014357322277],
          [-2.2543658127168964, 8.301891081294801],
          [-2.25676907199424, 8.302400668588616]]]),
    selectedLakes = ee.FeatureCollection("projects/ee-cvanmeursdata/assets/Thesis/Selected_Lakes");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/*

  Differently than with Bosomtwe/Kpong, only Bragg patches were selected and collected here, no water patches. 
  For the as to why, please refer to the Thesis document provided within the Github repository. 
  
  As the reservoir behind the Bui Dam is (a). not present in the HydroLAKES database and (b). the reservoir is of 
  extreme size, only a portion of the reservoir has been outlined as an ee.Geometry.Polygon here and used as 
  classification material. 
  
*/

// Import geometry and select lake. 
var lakeBui = ee.Feature(Bui);

// Set center and add lake outline. 
Map.centerObject(lakeBui, 13);
Map.addLayer(lakeBui, {}, 'Lake Outline');

// Function to set class to bragg/water
var setClassBragg = function(feature) {
  return feature.set('class', 2);
};


// ------------------------------------------------------------------------------------------------ //
// ----------------------------- (1). SELECTION BRAGG PATCHES ------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2018 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// September 18th
var braggBui20180918 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-2.1947833154885776, 8.316130544340083],
          [-2.1914359186379917, 8.315960687926978],
          [-2.188603505918265, 8.318338671011885],
          [-2.1846552942483433, 8.318933164528538],
          [-2.182509527036429, 8.321820691635699],
          [-2.1832820032327183, 8.323264447207512],
          [-2.181136236020804, 8.323434300454311],
          [-2.1781321619241245, 8.324453418387979],
          [-2.174870595762015, 8.32564238595831],
          [-2.170407399961234, 8.32691627577695],
          [-2.172124013730765, 8.328444938087246],
          [-2.17349730474639, 8.329718818785047],
          [-2.176844701596976, 8.328105235867572],
          [-2.1796771143167026, 8.326831349918015],
          [-2.1819087122170933, 8.327935384647168],
          [-2.18173705084014, 8.329294192346524],
          [-2.1814795587747104, 8.331077620291964],
          [-2.1837969873635776, 8.33201179359066],
          [-2.18474112493682, 8.329803744017463],
          [-2.1863719080178745, 8.326406720346926],
          [-2.18723021490264, 8.327510756273696],
          [-2.1897193048684604, 8.326321794377435],
          [-2.191950902768851, 8.324113712704769],
          [-2.19298087103057, 8.321650837689138],
          [-2.195126638242484, 8.31867838170327]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2019 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// April 28th
var braggBui20190428 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-2.2376128290383823, 8.288138803690517],
          [-2.230059728452445, 8.292215626217628],
          [-2.227484807798148, 8.294254021628301],
          [-2.2301455591409214, 8.296802001024538],
          [-2.232377157041312, 8.296971865730166],
          [-2.2336646173684604, 8.297141730362346],
          [-2.232205495664359, 8.298925304566065],
          [-2.2292872522561558, 8.29934996389716],
          [-2.2279139612405308, 8.296886933386526],
          [-2.2261973474709995, 8.295697878647939],
          [-2.2226782892434604, 8.29773625599666],
          [-2.2179576013772495, 8.299604759275427],
          [-2.215468511411429, 8.301388322294942],
          [-2.2220774744241245, 8.30283215309177],
          [-2.22319327337432, 8.30427597857893],
          [-2.2255965326516636, 8.30325680819802],
          [-2.227055654355765, 8.30274722201539],
          [-2.22868643743682, 8.30427597857893],
          [-2.2299738977639683, 8.305465007345592],
          [-2.233578786679984, 8.305040354628131],
          [-2.2364111993997104, 8.305634868303938],
          [-2.2367545221536167, 8.30368146284496],
          [-2.235896215268851, 8.30274722201539],
          [-2.236325368711234, 8.300793802188444],
          [-2.2389861200540073, 8.298330780731247],
          [-2.2426768396584995, 8.299689691031453],
          [-2.2448226068704136, 8.300539007581577],
          [-2.24490843755889, 8.30351160104131],
          [-2.2475691889016636, 8.302067772743035],
          [-2.2501441095559604, 8.298330780731247],
          [-2.2507449243752964, 8.29535814806175],
          [-2.25040160162139, 8.293829356789479],
          [-2.248684987851859, 8.29637733893916],
          [-2.246710882016898, 8.292385492905566],
          [-2.244565114804984, 8.289922418746972],
          [-2.2383853052346714, 8.288733342941459]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// April 4th
var braggBui20190404 = ee.Feature(
        lakeBui.geometry().buffer(-300),
        {
          "class": 2,
          "system:index": "0"
        }
);

// August 8th
var braggBui20190808 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-2.197272405454398, 8.316038711798354],
          [-2.194869146177054, 8.318161911248772],
          [-2.1918650720803745, 8.318161911248772],
          [-2.1891184900491245, 8.320200171898797],
          [-2.186114415952445, 8.320200171898797],
          [-2.1828528497903354, 8.322747982799006],
          [-2.1814795587747104, 8.32453144056801],
          [-2.1842261408059604, 8.32555055564629],
          [-2.188603505918265, 8.325125924686024],
          [-2.1944399927346714, 8.323427396240124],
          [-2.1996756647317417, 8.32062480819957],
          [-2.2011347864358433, 8.317227704907651]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2020 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// May 10th
var braggBui20200510 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-2.240576353889081, 8.30385366586739],
          [-2.2371431263500186, 8.300286554122932],
          [-2.234482375007245, 8.296379680275992],
          [-2.2324224384838076, 8.29459609451644],
          [-2.2295041950756045, 8.29595501773419],
          [-2.227272597175214, 8.29722900398268],
          [-2.224096861701581, 8.29722900398268],
          [-2.2192903431468936, 8.298757782027739],
          [-2.2202344807201357, 8.302834494390117],
          [-2.2177453907543154, 8.305127626493052],
          [-2.215256300788495, 8.30385366586739],
          [-2.2119947346263857, 8.308864553805424],
          [-2.210793104987714, 8.314809592074248],
          [-2.213110533576581, 8.318801210043917],
          [-2.2186895283275576, 8.320839467368238],
          [-2.2204919727855654, 8.318546427132837],
          [-2.2249551685863467, 8.317697149566227],
          [-2.226671782355878, 8.315404090943826],
          [-2.2290750416332217, 8.315489019280157],
          [-2.232164946418378, 8.31345073413003],
          [-2.2346540363841982, 8.31463973508877],
          [-2.239203062873456, 8.311837084204871],
          [-2.240404692512128, 8.30580707046939]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// September 30th
var braggBui20200930 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-2.2193308923928745, 8.317609880498184],
          [-2.2176142786233433, 8.314467536800796],
          [-2.213151082822562, 8.31276896215285],
          [-2.2121211145608433, 8.30521021577025],
          [-2.210404500791312, 8.305549937833964],
          [-2.20396719915557, 8.310051227413034],
          [-2.2026797388284214, 8.312599104283379],
          [-2.1993323419778354, 8.314467536800796],
          [-2.1993323419778354, 8.317100312961314],
          [-2.20370970709014, 8.321176834702491],
          [-2.20671378118682, 8.322960299625976],
          [-2.2097178552834995, 8.32457390374924],
          [-2.21220694524932, 8.32584779704444],
          [-2.2132369135110386, 8.323045226324526],
          [-2.215296850034476, 8.324404050996735],
          [-2.2161551569192417, 8.323384932934587],
          [-2.2173567865579136, 8.321431615903016],
          [-2.2196742151467808, 8.320837126177368]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2021 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// September 13th
var braggBui20210913 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-2.2181292627542026, 8.300411610216146],
          [-2.2150393579690464, 8.300496541797688],
          [-2.2126360986917026, 8.30177051331666],
          [-2.2118636224954136, 8.303299273683393],
          [-2.2144385431497104, 8.305422542094536],
          [-2.217270955869437, 8.304658166789586],
          [-2.218472585508109, 8.305592403071241],
          [-2.2214766596047886, 8.305252681044294],
          [-2.220961675473929, 8.30177051331666]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);


// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2022 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// March 24th
var braggBui20220324 = ee.Feature(
                        ee.Geometry.MultiPolygon(
        [[[-2.2524615381448276, 8.300241746997951],
          [-2.2471400354592808, 8.293956756289301],
          [-2.2434493158547886, 8.290389554686858],
          [-2.238814458677054, 8.288096336566776],
          [-2.237870321103812, 8.294466353875643],
          [-2.238471135923148, 8.301006130901225],
          [-2.2371836755959995, 8.303469135578924],
          [-2.2370120142190464, 8.30618691591082],
          [-2.241561040708304, 8.307460868962918],
          [-2.243535146543265, 8.30898960716578],
          [-2.240445241758109, 8.311537490932242],
          [-2.239844426938773, 8.313660714760518],
          [-2.242762670346976, 8.313660714760518],
          [-2.245337591001273, 8.310433409998714],
          [-2.248427495786429, 8.30898960716578],
          [-2.2503157709329136, 8.308395098572458],
          [-2.2507449243752964, 8.304063651634449]]]),
        {
          "class": 2,
          "system:index": "0"
        }
);



var braggBui = ee.List([
  braggBui20180918,
  
  braggBui20190404,
  braggBui20190428,
  braggBui20190808,
  
  braggBui20200930,
  braggBui20200510,
  
  braggBui20210913,

  braggBui20220324,
]);

// ---------------------------------- (c). sample lists ------------------------------------------- //

// Sample the lists with random points, so that they can be used in classification. 
var randomPointsBragg = braggBui.map(function(listElement) {
  return ee.FeatureCollection.randomPoints({
    region: ee.Feature(listElement).geometry(),
    points: 50, 
    seed: 0, 
    maxError: 1,
  }).map(setClassBragg);
});

// ------------------------------------------------------------------------------------------------ //
// --------------------------- (2). COMPUTE SENTINEL-1 IMAGERY ------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Define a neighborhood with a kernel.
var kernel = ee.Kernel.circle({radius: 4});

// Function to compute Entropy. 
var computeEntropy = function (image) {
  var ent =  ee.Image(image.toInt32()).entropy(kernel).rename('VV_E', 'VH_E');
  return image.addBands(ent);
};

// Function to compute GLCM Features. 
var computeGlcm = function (image) {
  var glcm = ee.Image(image.toInt32()).glcmTexture(4); 
  return image.addBands(glcm);
};

// Compile list of the selected Bands: VV, VH, Ent, GLCM.
var selectedBands = ee.List([
  "VV",
  "VH",
  "VV_E",
  "VH_E",
  "VV_asm",
  "VV_contrast",
  "VV_corr",
  "VV_var",
  "VV_idm",
  "VV_savg",
  "VV_svar",
  "VV_sent",
  "VV_ent",
  "VV_dvar",
  "VV_dent",
  "VV_diss",
  "VV_inertia",
  "VV_shade",
  "VV_prom",
  "VH_asm",
  "VH_contrast",
  "VH_corr",
  "VH_var",
  "VH_idm",
  "VH_savg",
  "VH_svar",
  "VH_sent",
  "VH_ent",
  "VH_dvar",
  "VH_dent",
  "VH_diss",
  "VH_inertia",
  "VH_shade",
  "VH_prom",
]);


// Total Sentinel-1 Imagery for 2018-2019
var Sentinel = ee.ImageCollection('COPERNICUS/S1_GRD')
          .filterBounds(lakeBui.geometry())
          .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
          .filter(ee.Filter.date('2018-01-01', '2023-01-01'))
          .select('VV', 'VH')
          .map(computeEntropy)
          .map(computeGlcm)
          .select(selectedBands);

// ImageCollection to List
var S1 = Sentinel.toList(Sentinel.size());


// Bragg Dates for Sentinel-1 Imagery 2018-2022
var bD = ee.List(['2018-09-18',
                  '2019-04-04', '2019-04-28', '2019-08-08',
                  '2020-09-30', '2020-05-10',
                  '2021-09-13',
                  '2022-03-24'
]);
var bDn = bD.map(function(date) {
  var nextDate = ee.Date(date).advance(1, 'day');
  var dateCombo = [ee.Date(date), nextDate];
  return dateCombo;
});

// Bragg Sentinel-1 Imagery for 2018-2022, compiled from the Bragg Dates. 
var SB1 = bDn.map(function(date) {
  return ee.Image(Sentinel.filter(ee.Filter.date(ee.List(date).get(0), ee.List(date).get(1))).first());
});


// ------------------------------------------------------------------------------------------------ //
// ------------------------------- (3). COMPUTE SNIC IMAGERY -------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------------------------ //
// ------------------------------- (3). COMPUTE SNIC IMAGERY -------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// function to compute SNIC superpixels. 
var afn_SNIC = function(imageOriginal) {
  
  // Adjustable Superpixel Seed and SNIC segmentation Parameters:
  var superPixelSize = 50;
  var compactness = 1;
  var connectivity = 4;
  var seedShape = 'square';
  var neighborhoodSize = 2 * superPixelSize;
  
  // Creates seed grid. 
    var theSeeds = ee.Algorithms.Image.Segmentation.seedGrid(
        superPixelSize, seedShape);
  
  // Preforms actual SNIC Segmentation. 
    var snic = ee.Algorithms.Image.Segmentation.SNIC({
        image: imageOriginal,
        size: superPixelSize,
        compactness: compactness,
        connectivity: connectivity,
        neighborhoodSize: neighborhoodSize,
        seeds: theSeeds
    });
  
  // Copies 'system:time_start' parameter to the computed SNIC imagery. 
    var theStack = snic.addBands(theSeeds).copyProperties({
      source: imageOriginal, 
      properties: ['system:time_start']
    });
    return (theStack);
};


// Create SNIC images for all Bragg dates
var SNICsBragg = SB1.map(afn_SNIC);

// Compute list of band names. 
var propertyList = ee.Image(SNICsWater.get(0)).bandNames();//.slice(1, 41);

// ------------------------------------------------------------------------------------------------ //
// ---------------------------------- (4). OVERLAY PIXELS ----------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// Zip together SNIC Imagery with the random Bragg samples.
var BraggPredictor = ee.List(randomPointsBragg).zip(SNICsBragg);

// Overlay and SNIC values for Bragg by applying reduceRegions. 
var fcSamplesBragg = BraggPredictor.map(function(imagePair) {
  return ee.Image(ee.List(imagePair).get(1)).select(propertyList).reduceRegions({
    collection: ee.FeatureCollection(ee.List(imagePair).get(0)),
    reducer: ee.Reducer.first(), 
    scale: 10, // Smaller scale can be used since less data is processed, so no computation time-out will occur.
  });
});


// Merge all braggTraining instances together to create one Bragg data training set. 
var mergerBragg = ee.FeatureCollection([]);
for (var i=0; i <=7; i++){ // This value is depedent on the amount of Bragg dates 
  var mergedBragg = mergerBragg.merge(ee.FeatureCollection(ee.List(fcSamplesBragg).get(i)));
  var mergerBragg = mergedBragg;
}

var merger = mergerBragg;

// ------------------------------------------------------------------------------------------------ //
// ------------------------------------ (5). EXPORT DATA ------------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Export the FeatureCollection to a CSV file to Google Drive.
Export.table.toDrive({
  collection: merger,
  description:'VV_VH_Ent_GLCM_Bui_Scl_10',
  folder: 'Task 50',
  fileFormat: 'CSV'
});




