/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var selectedLakes = ee.FeatureCollection("projects/ee-cvanmeursdata/assets/Thesis/Selected_Lakes");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Import geometry and select lake. 
var lakeKpong = ee.Feature(ee.Feature(selectedLakes.filter(ee.Filter.eq('Hylak_id', 15904)).first()).buffer(-450).buffer(350));

// Set center and add lake outline. 
Map.centerObject(lakeKpong, 13);
Map.addLayer(lakeKpong, {}, 'Lake Outline');

// Function to set class to bragg/water
var setClassWater = function(feature) {
  return feature.set('class', 1);
};
var setClassBragg = function(feature) {
  return feature.set('class', 2);
};

// ------------------------------------------------------------------------------------------------ //
// ----------------------------- (1). SELECTION BRAGG PATCHES ------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// ------------------------------------------------------------------------------------------------ //
// ----------------------------------------- 2021 ------------------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// JANUARY

// Jan 5th
var waterKpong20210105 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jan 11th
var waterKpong20210111 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });
        
// Jan 17th
var waterKpong20210117 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jan 23rd
var waterKpong20210123 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jan 29th
var waterKpong20210129 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// FEBRUARY

// Feb 4th
var waterKpong20210204 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Feb 10th
var waterKpong20210210 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Feb 16th
var waterKpong20210216 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Feb 22nd
var waterKpong20210222 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });
  
// Feb 28th
var waterKpong20210228 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// MARCH

// Mar 6th
var waterKpong20210306 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Mar 12th
var waterKpong20210312 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Mar 18th
var waterKpong20210318 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Mar 24th
var waterKpong20210324 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Mar 30th
var waterKpong20210330 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// APRIL

// Apr 5th
var waterKpong20210405 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Apr 11th
var waterKpong20210411 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Apr 17th
var waterKpong20210417 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Apr 23rd
var waterKpong20210423 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Apr 29th
var waterKpong20210429 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// MAY

// May 5th
var waterKpong20210505 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// May 11th
var waterKpong20210511 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// May 17th
var waterKpong20210517 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// May 23rd
var waterKpong20210523 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// May 29th
var waterKpong20210529 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// JUNE

// Jun 4th
var waterKpong20210604 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jun 10th
var waterKpong20210610 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jun 16th
var waterKpong20210616 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jun 22nd
var waterKpong20210622 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jun 28th
var waterKpong20210628 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// JULY

// Jul 4th
var waterKpong20210704 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jul 10th
var waterKpong20210710 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jul 16th
var waterKpong20210716 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });
        
// Jul 22nd
var waterKpong20210722 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Jul 28th
var waterKpong20210728 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// AUGUST

// Aug 3rd
var waterKpong20210803 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Aug 9th
var waterKpong20210809 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Aug 15th
var waterKpong20210815 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Aug 21st
var waterKpong20210821 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Aug 27th
var braggKpong20210827 = ee.Feature(ee.Geometry.MultiPolygon(
        [[[[0.08832333298164574, 6.157941847147469],
           [0.0870358726544973, 6.157259163163715],
           [0.08652088852363793, 6.156235135542731],
           [0.08815167160469262, 6.156235135542731],
           [0.08798001022773949, 6.155125770058976],
           [0.08755085678535668, 6.153845730083972],
           [0.08832333298164574, 6.152736359611518],
           [0.08892414780098168, 6.151285640884508],
           [0.09021160812813012, 6.150432275078124],
           [0.09209443079906343, 6.1500135583147335],
           [0.0928669069953525, 6.151037597924488],
           [0.09226609217601656, 6.151890962759224],
           [0.09243775355296968, 6.153256343645229],
           [0.09303856837230562, 6.153512352170841],
           [0.0942401980109775, 6.153939032772819],
           [0.093553552503165, 6.155816423351122],
           [0.09226609217601656, 6.156413773507477],
           [0.09132195460277437, 6.157352465253077],
           [0.09003449427562593, 6.156840451779317],
           [0.08900452601390718, 6.1570111229920865]]],
         [[[0.11886842720268298, 6.144005008774879],
           [0.11783845894096423, 6.142895617776905],
           [0.11637933723686267, 6.14281027991206],
           [0.11449106209037829, 6.142895617776905],
           [0.1142335700249486, 6.141274196005917],
           [0.11466272346733142, 6.139482092515059],
           [0.11440523140190173, 6.137689982994719],
           [0.11320360176322986, 6.13555651142085],
           [0.11346109382865954, 6.134191085131688],
           [0.11534936897514392, 6.133679049371604],
           [0.11534936897514392, 6.135215155176462],
           [0.1162935065483861, 6.137263289363281],
           [0.11732347481010486, 6.136665917705219],
           [0.11792428962944079, 6.137775321680008],
           [0.12084253303764392, 6.137775321680008],
           [0.12230165474174548, 6.1367512565545095],
           [0.12281663887260486, 6.1376046442957675],
           [0.12281663887260486, 6.139226077238414],
           [0.12118585579155017, 6.140164799317868],
           [0.12187250129936267, 6.142383590382671],
           [0.12075670234916736, 6.144175684107816],
           [0.12024171821830798, 6.146565133021425]]]]), 
        {
          "class": 2, 
          "system:index": "0"
        });

var waterKpong20210827 = ee.Feature(lakeKpong.difference({'right': braggKpong20210827, 'maxError': 1})).set("class", 1);

// SEPTEMBER

// Sep 2nd
var waterKpong20210902 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Sep 8th
var waterKpong20210908 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Sep 14th
var waterKpong20210914 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Sep 20th
var waterKpong20210920 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });
  
// Sep 26th
var waterKpong20210926 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// OCTOBER

// Oct 2nd
var waterKpong20211002 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Oct 8th
var waterKpong20211008 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Oct 14th
var waterKpong20211014 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Oct 20th
var waterKpong20211020 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Oct 26th
var waterKpong20211026 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// NOVEMBER

// Nov 1st
var waterKpong20211101 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Nov 7th
var waterKpong20211107 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Nov 13th
var waterKpong20211113 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Nov 19th
var waterKpong20211119 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Nov 25th
var waterKpong20211125 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// DECEMBER

// Dec 1st
var waterKpong20211201 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Dec 7th
var waterKpong20211207 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Dec 13th
var waterKpong20211213 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Dec 19th
var waterKpong20211219 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// Dec 25th
var waterKpong20211225 = ee.Feature(lakeKpong.geometry(), 
        {
          "class": 1, 
          "system:index": "0"
        });

// --------------------------------- (b). compile lists ------------------------------------------- //

var waterKpong2021 = ee.List([
waterKpong20210111,
waterKpong20210123,
waterKpong20210204,
waterKpong20210216,
waterKpong20210228,
waterKpong20210312,
waterKpong20210324,
waterKpong20210405,
waterKpong20210417,
waterKpong20210429,
waterKpong20210511,
waterKpong20210523,
waterKpong20210604,
waterKpong20210616,
waterKpong20210628,
waterKpong20210710,
waterKpong20210722,
waterKpong20210803,
waterKpong20210815,
waterKpong20210827,
waterKpong20210908,
waterKpong20210920,
waterKpong20211002,
waterKpong20211014,
waterKpong20211026,
waterKpong20211107,
waterKpong20211119,
waterKpong20211201,
waterKpong20211213,
waterKpong20211225,
waterKpong20210105,
waterKpong20210117,
waterKpong20210129,
waterKpong20210210,
waterKpong20210222,
waterKpong20210306,
waterKpong20210318,
waterKpong20210330,
waterKpong20210411,
waterKpong20210423,
waterKpong20210505,
waterKpong20210517,
waterKpong20210529,
waterKpong20210610,
waterKpong20210622,
waterKpong20210704,
waterKpong20210716,
waterKpong20210728,
waterKpong20210809,
waterKpong20210821,
waterKpong20210902,
waterKpong20210914,
waterKpong20210926,
waterKpong20211008,
waterKpong20211020,
waterKpong20211101,
waterKpong20211113,
waterKpong20211125,
waterKpong20211207,
waterKpong20211219,
]);
var braggKpong2021 = ee.List([
  braggKpong20210827
]);

// ---------------------------------- (c). sample lists ------------------------------------------- //

// Sample the lists with random points, so that they can be used in classification. 
var randomPointsWater = waterKpong2021.map(function(listElement) {
  return ee.FeatureCollection.randomPoints({
    region: ee.Feature(listElement).geometry(),
    points: 50, 
    seed: 0, 
    maxError: 1,
  }).map(setClassWater);
});

var randomPointsBragg = braggKpong2021.map(function(listElement) {
  return ee.FeatureCollection.randomPoints({
    region: ee.Feature(listElement).geometry(),
    points: 50, 
    seed: 0, 
    maxError: 1,
  }).map(setClassBragg);
});

// ------------------------------------------------------------------------------------------------ //
// --------------------------- (2). COMPUTE SENTINEL-1 IMAGERY ------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Define a neighborhood with a kernel.
var kernel = ee.Kernel.circle({radius: 4});

// Function to compute Entropy. 
var computeEntropy = function (image) {
  var ent =  ee.Image(image.toInt32()).entropy(kernel).rename('VV_E', 'VH_E');
  return image.addBands(ent);
};

// Function to compute GLCM Features. 
var computeGlcm = function (image) {
  var glcm = ee.Image(image.toInt32()).glcmTexture(4); 
  return image.addBands(glcm);
};

// Compile list of the selected Bands: VV, VH, Ent, GLCM.
var selectedBands = ee.List([
  "VV",
  "VH",
  "VV_E",
  "VH_E",
  "VV_asm",
  "VV_contrast",
  "VV_corr",
  "VV_var",
  "VV_idm",
  "VV_savg",
  "VV_svar",
  "VV_sent",
  "VV_ent",
  "VV_dvar",
  "VV_dent",
  "VV_diss",
  "VV_inertia",
  "VV_shade",
  "VV_prom",
  "VH_asm",
  "VH_contrast",
  "VH_corr",
  "VH_var",
  "VH_idm",
  "VH_savg",
  "VH_svar",
  "VH_sent",
  "VH_ent",
  "VH_dvar",
  "VH_dent",
  "VH_diss",
  "VH_inertia",
  "VH_shade",
  "VH_prom",
]);

// Total Sentinel-1 Imagery for 2021-2022
var Sentinel = ee.ImageCollection('COPERNICUS/S1_GRD')
          .filterBounds(lakeKpong.geometry())
          .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
          .filter(ee.Filter.date('2021-01-01', '2022-01-01'))
          .select('VV', 'VH')
          .map(computeEntropy)
          .map(computeGlcm)
          .select(selectedBands);

// ImageCollection to List
var S12021 = Sentinel.toList(Sentinel.size());

// Bragg Dates for Sentinel-1 Imagery 2021-2022
var bD = ee.List(['2021-08-27']);
var bDn = bD.map(function(date) {
  var nextDate = ee.Date(date).advance(1, 'day');
  var dateCombo = [ee.Date(date), nextDate];
  return dateCombo;
});

// Bragg Sentinel-1 Imagery for 2021-2022, compiled from the Bragg Dates. 
var SB12021 = bDn.map(function(date) {
  return ee.Image(Sentinel.filter(ee.Filter.date(ee.List(date).get(0), ee.List(date).get(1))).first());
});


// ------------------------------------------------------------------------------------------------ //
// ------------------------------- (3). COMPUTE SNIC IMAGERY -------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// function to compute SNIC superpixels. 
var afn_SNIC = function(imageOriginal) {
  
  // Adjustable Superpixel Seed and SNIC segmentation Parameters:
  var superPixelSize = 30;
  var compactness = 1;
  var connectivity = 4;
  var seedShape = 'square';
  var neighborhoodSize = 2 * superPixelSize;
  
  // Creates seed grid. 
    var theSeeds = ee.Algorithms.Image.Segmentation.seedGrid(
        superPixelSize, seedShape);
  
  // Preforms actual SNIC Segmentation. 
    var snic = ee.Algorithms.Image.Segmentation.SNIC({
        image: imageOriginal,
        size: superPixelSize,
        compactness: compactness,
        connectivity: connectivity,
        neighborhoodSize: neighborhoodSize,
        seeds: theSeeds
    });
  
  // Copies 'system:time_start' parameter to the computed SNIC imagery. 
    var theStack = snic.addBands(theSeeds).copyProperties({
      source: imageOriginal, 
      properties: ['system:time_start']
    });
    return (theStack);
};

// Create SNIC images for all dates, and seperately for all Bragg dates.  
var SNICsWater = S12021.map(afn_SNIC);
var SNICsBragg = SB12021.map(afn_SNIC);

// Compute list of band names. 
var propertyList = ee.Image(SNICsWater.get(0)).bandNames();//.slice(1, 41);

// ------------------------------------------------------------------------------------------------ //
// ---------------------------------- (4). OVERLAY PIXELS ----------------------------------------- //
// ------------------------------------------------------------------------------------------------ //

// Zip together SNIC Imagery with the random water samples.
var waterPredictor = ee.List(randomPointsWater).zip(SNICsWater);

// Overlay and SNIC values for water by applying reduceRegions. 
var fcSamplesWater = waterPredictor.map(function(imagePair) {
  return ee.Image(ee.List(imagePair).get(1)).select(propertyList).reduceRegions({
    collection: ee.FeatureCollection(ee.List(imagePair).get(0)),
    reducer: ee.Reducer.first(), 
    scale: 10, // Smaller scale can be used since less data is processed, so no computation time-out will occur.
  });
});


// Zip together SNIC Imagery with the random Bragg samples.
var BraggPredictor = ee.List(randomPointsBragg).zip(SNICsBragg);

// Overlay and SNIC values for Bragg by applying reduceRegions. 
var fcSamplesBragg = BraggPredictor.map(function(imagePair) {
  return ee.Image(ee.List(imagePair).get(1)).select(propertyList).reduceRegions({
    collection: ee.FeatureCollection(ee.List(imagePair).get(0)),
    reducer: ee.Reducer.first(), 
    scale: 10, // Smaller scale can be used since less data is processed, so no computation time-out will occur.
  });
});


// Merge all waterTraining instances together to create one water data training set. 
var mergerWater = ee.FeatureCollection([]);
for (var i=0; i <=59; i++){ // The value of 56 is dependent on the size of this years ImageCollection.
  var mergedWater = mergerWater.merge(ee.FeatureCollection(ee.List(fcSamplesWater).get(i)));
  var mergerWater = mergedWater;
}

// Merge all braggTraining instances together to create one Bragg data training set. 
var mergerBragg = ee.FeatureCollection([]);
for (var i=0; i <=0; i++){ // The value of 2 is dependent on the amount of Bragg scattering present in that year.
  var mergedBragg = mergerBragg.merge(ee.FeatureCollection(ee.List(fcSamplesBragg).get(i)));
  var mergerBragg = mergedBragg;
}

// Merge both sets together so that it is ready for export
var merger = mergerWater.merge(mergerBragg);

// ------------------------------------------------------------------------------------------------ //
// ------------------------------------ (5). EXPORT DATA ------------------------------------------ //
// ------------------------------------------------------------------------------------------------ //

// Export the FeatureCollection to a CSV file to Google Drive.
Export.table.toDrive({
  collection: merger,
  description:'VV_VH_Ent_GLCM_Kpong_2021_Scl_10',
  folder: 'Task 50',
  fileFormat: 'CSV'
});
